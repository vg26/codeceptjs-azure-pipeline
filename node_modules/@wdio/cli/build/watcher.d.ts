/// <reference types="node" />
import type { Options } from '@wdio/types';
import { RunCommandArguments } from './types.js';
import { EventEmitter } from 'events';
export default class Watcher {
    private _configFile;
    private _args;
    private _launcher;
    private _specs;
    constructor(_configFile: string, _args: Omit<Options.Testrunner, 'capabilities'>);
    watch(): Promise<void>;
    /**
     * return file listener callback that calls `run` method
     * @param  {Boolean}  [passOnFile=true]  if true pass on file change as parameter
     * @return {Function}                    chokidar event callback
     */
    getFileListener(passOnFile?: boolean): (spec: string) => void;
    /**
     * helper method to get workers from worker pool of wdio runner
     * @param  {Function} pickBy             filter by property value (see lodash.pickBy)
     * @param  {Boolean}  includeBusyWorker  don't filter out busy worker (default: false)
     * @return {Object}                      Object with workers, e.g. {'0-0': { ... }}
     */
    getWorkers(pickByFn?: (value: any, key: string) => any, includeBusyWorker?: boolean): EventEmitter;
    /**
     * run workers with params
     * @param  {Object} [params={}]  parameters to run the worker with
     */
    run(params?: Partial<RunCommandArguments>): void;
    cleanUp(): void;
}
//# sourceMappingURL=watcher.d.ts.map